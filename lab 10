1)#include <stdio.h>
#include <string.h>

int main() {
    char nome[100];
    int comprimento, i;

    printf("Digite seu nome: ");
    gets(nome);

    comprimento = strlen(nome);
    printf("Nome invertido: ");
    for(i = comprimento - 1; i >= 0; i--) {
        printf("%c", nome[i]);
    }
    printf("\n");

    return 0;
}
2)#include <stdio.h>

int main() {
    int var;
    int *ptr;

    printf("Digite um valor inteiro: ");
    scanf("%d", &var);

    ptr = &var;

    printf("Conteúdo da variável: %d\n", var);
    printf("Endereço da variável: %p\n", (void*)&var);
    printf("Conteúdo do ponteiro: %p\n", (void*)ptr);

    return 0;
}
3)#include <stdio.h>

void Calculadora(int *a, int *b, int *resultado, char op) {
    switch(op) {
        case '+':
            *resultado = *a + *b;
            break;
        case '-':
            *resultado = *a - *b;
            break;
        case '*':
            *resultado = *a * *b;
            break;
        case '/':
            if (*b != 0) {
                *resultado = *a / *b;
            } else {
                printf("Erro: Divisão por zero.\n");
                return;
            }
            break;
        default:
            printf("Operação inválida.\n");
            return;
    }
}

int main() {
    int num1, num2, resultado;
    char op;

    printf("Digite o primeiro número: ");
    scanf("%d", &num1);
    printf("Digite o segundo número: ");
    scanf("%d", &num2);
    printf("Digite a operação (+, -, *, /): ");
    scanf(" %c", &op);

    Calculadora(&num1, &num2, &resultado, op);

    printf("Resultado: %d\n", resultado);

    return 0;
}
4)#include <stdio.h>
#define MAX_SIZE 100

int count(int list[], int size, int element) {
    int count = 0;
    for (int i = 0; i < size; i++) {
        if (list[i] == element) {
            count++;
        }
    }
    return count;
}

int index(int list[], int size, int element) {
    for (int i = 0; i < size; i++) {
        if (list[i] == element) {
            return i;
        }
    }
    return -1;
}

void reverse(int list[], int size) {
    for (int i = 0; i < size / 2; i++) {
        int temp = list[i];
        list[i] = list[size - i - 1];
        list[size - i - 1] = temp;
    }
}

void sort(int list[], int size) {
    for (int i = 0; i < size - 1; i++) {
        for (int j = 0; j < size - i - 1; j++) {
            if (list[j] > list[j + 1]) {
                int temp = list[j];
                list[j] = list[j + 1];
                list[j + 1] = temp;
            }
        }
    }
}

void append(int list[], int* size, int element) {
    if (*size < MAX_SIZE) {
        list[*size] = element;
        (*size)++;
    } else {
        printf("Erro: capacidade máxima atingida.\n");
    }
}

void insert(int list[], int* size, int index, int element) {
    if (*size < MAX_SIZE && index >= 0 && index <= *size) {
        for (int i = *size; i > index; i--) {
            list[i] = list[i - 1];
        }
        list[index] = element;
        (*size)++;
    } else {
        printf("Erro: índice fora do intervalo ou capacidade máxima atingida.\n");
    }
}

int pop(int list[], int* size, int index) {
    if (*size > 0 && index >= 0 && index < *size) {
        int popped_element = list[index];
        for (int i = index; i < *size - 1; i++) {
            list[i] = list[i + 1];
        }
        (*size)--;
        return popped_element;
    } else {
        printf("Erro: índice fora do intervalo ou lista vazia.\n");
        return -1;
    }
}

void remove_element(int list[], int* size, int element) {
    int idx = index(list, *size, element);
    if (idx != -1) {
        pop(list, size, idx);
    } else {
        printf("Erro: elemento não encontrado.\n");
    }
}

int main() {
    int list[MAX_SIZE] = {0};
    int size = 0;

    
    append(list, &size, 5);
    append(list, &size, 3);
    append(list, &size, 7);

    printf("Count of 3: %d\n", count(list, size, 3));
    printf("Index of 7: %d\n", index(list, size, 7));

    
    insert(list, &size, 1, 2);
    printf("Lista com inserção: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", list[i]);
    }
    printf("\n");

    
    int popped_element = pop(list, &size, 1);
    printf("Elemento retirado: %d\n", popped_element);
    printf("Lista com pop: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", list[i]);
    }
    printf("\n");

    
    remove_element(list, &size, 5);
    printf("Lista com remoção: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", list[i]);
    }
    printf("\n");

    
    reverse(list, size);
    printf("Lista com reversão: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", list[i]);
    }
    printf("\n");

   
    sort(list, size);
    printf("Lista com ordenação: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", list[i]);
    }
    printf("\n");

    return 0;
}

